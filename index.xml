<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vivek Kumar Singh</title>
    <link>http://www.viveksyngh.com/</link>
    <description>Recent content on Vivek Kumar Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 -0600</lastBuildDate><atom:link href="http://www.viveksyngh.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Diving into Amazon Dynamo Paper</title>
      <link>http://www.viveksyngh.com/paper-notes/diving-into-amazon-dynamo-paper/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/paper-notes/diving-into-amazon-dynamo-paper/</guid>
      <description>In this blog post, we are going to look into Amazon Dynamo paper which describes a set of techniques that can be combined to form a highly-available, distributed key-value data store. This paper then became foundation for databases such as Cassandra, Riak etc.
Dynamo addresses the need for an incrementally scalable, highly-available key-value storage system. The technology is designed to give its users the ability to trade-off cost, consistency, durability and performance, while maintaining high-availability.</description>
    </item>
    
    <item>
      <title>MapReduce Overview</title>
      <link>http://www.viveksyngh.com/paper-notes/mapreduce-overview/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/paper-notes/mapreduce-overview/</guid>
      <description>In this blog, I will be discussing MapReduce programming model and how it works. This blog is based on the original MapReduce research paper MapReduce: Simplified Data Processing on Large Clusters from Google.
MapReduce is a programming model and an associated implementation for processing and generating large data sets. User specifies a map function that processes a key/value pair to generate a set for intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key.</description>
    </item>
    
    <item>
      <title>What is proxy server?</title>
      <link>http://www.viveksyngh.com/system-design/what-is-proxy-server/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/system-design/what-is-proxy-server/</guid>
      <description>Word proxy defines, someone or something acting on behalf of something else. In computer science proxy means one server acting on behalf of other servers. A proxy server is a server ( or computer system or an application) that acts as an intermediary for requests from clients seeking resources from other servers.
A client connects to the proxy server, requesting for some service (file, connection, web page) available from a different server and the proxy server evaluates the request as a way simplify and control it’s complexity.</description>
    </item>
    
    <item>
      <title>Getting Started With Golang Interfaces</title>
      <link>http://www.viveksyngh.com/posts/getting-started-with-golang-interfaces/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/posts/getting-started-with-golang-interfaces/</guid>
      <description>Interfaces in Go provides a way to specify the behavior of an object. Interfaces allow us to write more flexible and scalable code in Go. It is also a mechanism to achieve polymorphism in Go.
type Interface interface { Method1(int, string) (int, error) Method2(int) bool Method3(string) } Interfaces specify methods (or behavior) but do not provide an implementation for those methods. Types implementing the interface provide an implementation of methods.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming and Golang</title>
      <link>http://www.viveksyngh.com/posts/object-oriented-programming-and-golang/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/posts/object-oriented-programming-and-golang/</guid>
      <description>Go has picked some good concepts from different kind of programming languages like procedural, functional and object-oriented programming language and combined them together to create a unique flavor programming language.
Go isn’t an object-oriented language like C++, Java, C# etc. but it supports some of the OOPs concepts like Encapsulation, Type Methods, Composition etc.
In this blog post, we will see how can we implement those concepts in Go
Type Methods Link to heading Go does not have classes but it has types.</description>
    </item>
    
    <item>
      <title>Pass by value and Pass by reference in Go</title>
      <link>http://www.viveksyngh.com/posts/pass-by-value-and-pass-by-reference-in-go/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/posts/pass-by-value-and-pass-by-reference-in-go/</guid>
      <description>In Go, everything is passed by value. When we pass arguments to a function, a function always gets the copy of the data passed. For example, passing an int value to function makes a copy of the int, passing a pointer value makes a copy of the pointer but not the data it points to.
When we pass a value to function it is called pass by value and when we pass a pointer to a function it is called pass by reference.</description>
    </item>
    
    <item>
      <title>HTTP Response in Golang</title>
      <link>http://www.viveksyngh.com/posts/http-response-in-golang/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/posts/http-response-in-golang/</guid>
      <description>In this blog post, I am going to talk about HTTP server and how to return different types of HTTP response(text, JSON, html) in Go.
Plain Text Response Link to heading Creating a web server in Go is very simple and we can do it by writing just a few lines of code.We need to use net/http package to create an HTTP server. This is how a simple HTTP server code looks like in Go.</description>
    </item>
    
    <item>
      <title>Timeout commands in Golang</title>
      <link>http://www.viveksyngh.com/posts/timeout-commands-in-golang/</link>
      <pubDate>Tue, 28 Aug 2018 00:10:34 -0600</pubDate>
      
      <guid>http://www.viveksyngh.com/posts/timeout-commands-in-golang/</guid>
      <description>Sometimes in our applications, we need to invoke external processes or commands (e.g CURL, Ping, SSH etc.) to perform some tasks. We can use os/exec Go package to invoke external processes. Most of the time we want to invoke these commands with timeouts.
In this blog post, I am going to talk about different ways in which we can invoke a command with a timeout.
Timeout with timer Link to heading In this method, we use a timer for the timeout.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://www.viveksyngh.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.viveksyngh.com/about/</guid>
      <description>My name is Vivek Kumar Singh and I am a Staff Engineer at VMWare where I am building softwares for infrastructure. My expertise lies in harnessing the power of Kubernetes, Golang, and cloud-native technologies to build robust and scalable solutions. I have also worked in multiple open-source communities and contributed to many open-source projects such as OpenFaaS, Kubernetes etc. I have a strong passion for distributed systems, cloud-native technologies, and open-source software.</description>
    </item>
    
  </channel>
</rss>
